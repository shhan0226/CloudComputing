package management;

import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.InetAddress;

import def.Worker;

public class WorkerResManager {
	private static WorkerResManager workerResManager = new WorkerResManager();
	private Worker worker;
	private UsageCheck update;

	
	public WorkerResManager(){
		System.out.println("[WorkerResManager.java] WorkerResManager()");
		worker = new Worker();
		update = new UsageCheck();
		WorkerInit();
	}
	
	public static WorkerResManager getInstance() {
		return workerResManager;
	}


	public void update_start() {
		update.startUpdate();
	}

	public void update_stop() {
		update.stopUpdate();
	}
	
	public void WorkerInit() {

		try {
			worker.setMyComputer(InetAddress.getLocalHost());
			worker.setHOST_NAME(worker.getMyComputer().getHostName());
			worker.setIP(worker.getMyComputer().getHostAddress());

		} catch (Exception e) {
			// TODO: handle exception
			System.out.println("[MainStatusView.java] WorkerInit()");
			e.printStackTrace();
		}

		OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
		float FreeMem = 0, TotalMem = 0;
		String Memory = "";

		for (Method method : operatingSystemMXBean.getClass().getDeclaredMethods()) {
			method.setAccessible(true);
			if (method.getName().startsWith("getFreePhysicalMemorySize") && Modifier.isPublic(method.getModifiers())) {
				Object value;
				try {
					value = method.invoke(operatingSystemMXBean);
				} catch (Exception e) {
					value = e;
				}
				FreeMem = ((float) ((long) value / 1024) / 1024) / 1024;

			} else if (method.getName().startsWith("getTotalPhysicalMemorySize")
					&& Modifier.isPublic(method.getModifiers())) {
				Object value;
				try {
					value = method.invoke(operatingSystemMXBean);
				} catch (Exception e) {
					value = e;
				}
				TotalMem = ((float) ((long) value / 1024) / 1024) / 1024;

			}
			Memory = String.format("%.2f", TotalMem);
			worker.setMEMORY_CAPA(Memory);
			Memory = String.format("%.2f", TotalMem - FreeMem);
			worker.setMEMORY_USAGE(Memory);

			if (method.getName().startsWith("getSystemCpuLoad") && Modifier.isPublic(method.getModifiers())) {
				Object value;
				try {
					value = method.invoke(operatingSystemMXBean);
				} catch (Exception e) {
					value = e;
				}
				String CPU = String.format("%.2f", (double) value * 100);
				// System.out.println(method.getName() + " = " + CPU + "%");
				worker.setCPU_USAGE(CPU);
			}
		}

	}
}
